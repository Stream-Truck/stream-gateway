// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/biz/sample_entity/sample_entity.go
//
// Generated by this command:
//
//	mockgen -source=./internal/biz/sample_entity/sample_entity.go -destination=./mock/biz/sample_entity.go
//

// Package mock_sample_entity is a generated GoMock package.
package mock_sample_entity

import (
	"application/internal/v1/entity"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSampleEntity is a mock of SampleEntity interface.
type MockSampleEntity struct {
	ctrl     *gomock.Controller
	recorder *MockSampleEntityMockRecorder
}

// MockSampleEntityMockRecorder is the mock recorder for MockSampleEntity.
type MockSampleEntityMockRecorder struct {
	mock *MockSampleEntity
}

// NewMockSampleEntity creates a new mock instance.
func NewMockSampleEntity(ctrl *gomock.Controller) *MockSampleEntity {
	mock := &MockSampleEntity{ctrl: ctrl}
	mock.recorder = &MockSampleEntityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSampleEntity) EXPECT() *MockSampleEntityMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSampleEntity) Create(ctx context.Context, sampEnt *entity.SampleEntity) (*entity.SampleEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, sampEnt)
	ret0, _ := ret[0].(*entity.SampleEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockSampleEntityMockRecorder) Create(ctx, sampEnt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSampleEntity)(nil).Create), ctx, sampEnt)
}

// Delete mocks base method.
func (m *MockSampleEntity) Delete(ctx context.Context, id uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockSampleEntityMockRecorder) Delete(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSampleEntity)(nil).Delete), ctx, id)
}

// List mocks base method.
func (m *MockSampleEntity) List(ctx context.Context) ([]*entity.SampleEntity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]*entity.SampleEntity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockSampleEntityMockRecorder) List(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockSampleEntity)(nil).List), ctx)
}

// Update mocks base method.
func (m *MockSampleEntity) Update(ctx context.Context, sampEnt *entity.SampleEntity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, sampEnt)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSampleEntityMockRecorder) Update(ctx, sampEnt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSampleEntity)(nil).Update), ctx, sampEnt)
}
